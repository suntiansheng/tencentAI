# summary(res)
coef_res <- cbind( coef_res, coefficients(res) )
}
#delete intercept
coef_res <- coef_res[,-1]
#add names
colnames(coef_res) <- colnames(converted_eval_dat)
virtual_dat <- read_excel("da2_Team3_Phone_preference1-2.xlsx", sheet = "DA2_questionnaire")
dim(virtual_dat)
eval_dat <- read_excel("da2_Team3_Phone_preference1-2.xlsx", sheet = "eval_kaneda")
#1.3 Convert the ranking
# Our team has 13 phones(order), thus 8 to 13
# such as ... 13 - 1 = 12
converted_eval_dat <- 13-eval_dat  # from 1-12 to 12-1
#1.4 Regression Model with Dummy Variables
coef_res <- 1:9 # 7 column(variable) + intercept
for( i in 1 : ncol(converted_eval_dat) ) {
#   i <- 1
# virtual_dat[,-8]
one_dat <- cbind(virtual_dat,converted_eval_dat[i])
# summary(one_dat)
# one_dat[,8]
res <- lm(one_dat[,length(one_dat)]~os+carrier+datacapacity+satisfaction+numberofphones+duration+insurance+backup, data = one_dat)
# summary(res)
coef_res <- cbind( coef_res, coefficients(res) )
}
#delete intercept
coef_res <- coef_res[,-1]
#add names
colnames(coef_res) <- colnames(converted_eval_dat)
View(coef_res)
for( i in 1 : ncol(converted_eval_dat) ) {
#   i <- 1
# virtual_dat[,-8]
one_dat <- cbind(virtual_dat,converted_eval_dat[i])
# summary(one_dat)
# one_dat[,8]
res <- lm(one_dat[,length(one_dat)]~os+carrier+datacapacity+satisfaction+numberofphones+duration+insurance+backup, data = one_dat)
# summary(res)
coef_res <- cbind( coef_res, coefficients(res) )
}
View(coef_res)
virtual_dat <- read_excel("da2_Team3_Phone_preference1-2.xlsx", sheet = "DA2_questionnaire")
dim(virtual_dat)
eval_dat <- read_excel("da2_Team3_Phone_preference1-2.xlsx", sheet = "eval_kaneda")
#1.3 Convert the ranking
# Our team has 13 phones(order), thus 8 to 13
# such as ... 13 - 1 = 12
converted_eval_dat <- 13-eval_dat  # from 1-12 to 12-1
#1.4 Regression Model with Dummy Variables
coef_res <- 1:9 # 7 column(variable) + intercept
for( i in 1 : ncol(converted_eval_dat) ) {
#   i <- 1
# virtual_dat[,-8]
one_dat <- cbind(virtual_dat,converted_eval_dat[i])
# summary(one_dat)
# one_dat[,8]
res <- lm(one_dat[,length(one_dat)]~os+carrier+datacapacity+satisfaction+numberofphones+duration+insurance+backup, data = one_dat)
# summary(res)
coef_res <- cbind( coef_res, coefficients(res) )
}
View(coef_res)
#delete coef_res
coef_res <- coef_res[,-1]
#add names
colnames(coef_res) <- colnames(converted_eval_dat)
View(coef_res)
# write.csv(coef_res, "da2_conjoint_result.csv")
par(mfrow=c(3,3), ps=20)
coef_res.t <- t(coef_res)
View(coef_res.t)
coef_res.t[,-1]
xmax <- max(coef_res.t[,-1]); xmin <- min(coef_res.t[,-1])
#2.1 Input Data
head(round(coef_res,3) ) # original preference data
coef_res.t <- t(coef_res)  # transposed
head(round(coef_res.t,3), n=6)
tmpdat <- coef_res.t[,-1] # remove intercept
View(tmpdat)
#2.2 Principal Component Analysis
#2.2.1 Conduct PCA
pref.princomp <-princomp(tmpdat, cor=T) # data standardization is done, aotumatically
View(pref.princomp)
#2.2.2 Determination of number of PCs by Screeplot and Cumlative Proportion
par(mfrow=c(1,1), ps=20)
screeplot(pref.princomp, main="screeplot"); abline(h=1)
pref.princomp$sdev^2;
summary(pref.princomp)
#2.2.3 Principal Component Loadings and Scores
round( pref.princomp$loadings[,c(1,2,3)], 3 )
head( round( pref.princomp$scores[,c(1,2,3)],3) )
#2.2.4 Tips..? Important, Eigen values and the variance of PCs
eigen(cor(tmpdat))
?eigen
pref.princomp$sdev^2;
#2.3 Plots of the obtained principal component Scores
x <- pref.princomp$scores[,1];
y <- pref.princomp$scores[,2];
z <- pref.princomp$scores[,3];
x
par(mfrow=c(1,3), ps=20)
plot(x,y, cex=2, xlab = "PC1", ylab = "PC2"); abline(v=0, h=0, lty=3)
plot(x,z, cex=2, xlab = "PC1", ylab = "PC3"); abline(v=0, h=0, lty=3)
plot(y,z, cex=2, xlab = "PC2", ylab = "PC3"); abline(v=0, h=0, lty=3)
plot(pref.princomp )
devtools::install_github('suntiansheng/tencentAI')
library(tencentAI)
app_key <- 'OpsMj8HXPmbu9SMd'
app_id <- '1107152791'
emotion('你好', app_key = app_key, app_id = app_id)
emotion('你好', app_key = app_key, app_id = app_id)
emotion <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session': '10000'
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result$data$polar)
}
library(devtools)
load_all()
load_all()
chat_test('你好', app_key = app_key, app_id = app_id)
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
keywords = '你好'
params_run <- params[nchar(params) > 0]
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session': '10000'
)
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session': '10000'
)
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
chat_test<- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result$data$polar)
}
chat_test('你好', app_key = app_key, app_id = app_id)
chat_test<- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
chat_test('你好', app_key = app_key, app_id = app_id)
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
params_run <- params[nchar(params) > 0]
params_run
params_run <- params[nchar(params) > 0]
params_run
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
params_str
str <- paste0(params_str, 'app_key=', app_key)
str
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
sign_str
translate- function(text, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
translate- function(text, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
translate- function(text, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
type = 1
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
result
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 16), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num()
)
text = '你好'
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num()
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textpolar'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
result
result
emotion('你好', app_key = app_key, app_id = app_id)
emotion <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num()
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textpolar'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result$data$polar)
}
emotion('你好', app_key = app_key, app_id = app_id)
translate <- function(app_id = app_id, app_key = app_key, keywords) {
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
#print(params)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
request_body <- params_trans(params = params, app_key = app_key)
# print(request_body)
curl_opts <- list(
# httpheader = myheader,
postfields = request_body
)
webpage <- RCurl::postForm(url, .opts = curl_opts)
result <- jsonlite::fromJSON(webpage)
return(result$data$answer)
}
translate('你好', app_key = app_key, app_id = app_id)
translate- function(text, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
translate- function(keywords, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = type
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
translate- function(keywords, app_key, app_id, type = 1){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = 1
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'text' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num(),
'type' = 1
)
params
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_texttrans'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
result
load_all()
load_all()
load_all()
translate('hello', app_id = app_id, app_key =  app_key)
translate('god', app_id = app_id, app_key =  app_key)
load_all()
translate('god', app_id = '1107152791' app_key =  'OpsMj8HXPmbu9SMd')
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
load_all()
load_all()
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
load_all()
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
load_all()
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
emotion('good days!', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
emotion('terrible', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
emotion('sad', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
emotion('very good', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
emotion('难过', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
document()
document()
?emotion
load_all()
translate('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
emotion('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
chatting('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
load_all()
load_all()
semantic('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
break <- funtion(return){
if(return$ret == 16452){
print("system busy, please try again later")
}
}
semantic('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')$ret
load_all()
semantic('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')$ret
load_all()
semantic('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')$ret
semantic('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
chatting('god', app_id = '1107152791' ,app_key =  'OpsMj8HXPmbu9SMd')
semantic('很开心', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
load_all()
semantic_test('很开心', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
semantic_test('很开心', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
load_all()
semantic_test('很开心', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
library(devtools)
document()
setwd("~/rwd/tencentAI")
devtools::install_github('suntiansheng/tencentAI')
devtools::install_github('suntiansheng/tencentAI')
devtools::install_github('suntiansheng/tencentAI')
devtools::install_github('suntiansheng/tencentAI')
library(tencentAI)
?emotion
emotion('很开心', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')
?translate
translate('god', app_id = '1107152791', app_key =  'OpsMj8HXPmbu9SMd')

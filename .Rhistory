test_that("emotion runs good",	{
skip('skip')
expect_equal(get_sign(c()),	0)
expect_message(emotion("hello"),	0)
})
devtools::test()
test_that("emotion runs good",	{
#expect_equal(get_sign(c()),	0)
expect_message(emotion("hello"),	0)
})
test_that("emotion runs good",	{
#expect_equal(get_sign(c()),	0)
expect_message(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	0)
})
#expect_equal(get_sign(c()),	0)
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	0)
test_that("emotion runs good",	{
#expect_equal(get_sign(c()),	0)
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	0)
})
devtools::test()
test_that("emotion runs good",	{
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	0)
})
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	1)
test_that("emotion runs good",	{
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	1)
})
devtools::test()
test_that("emotion runs good",	{
expect_equal(emotion("hello",app_id = "1107152791", app_key = "OpsMj8HXPmbu9SMd"),	0)
})
?check
check("get_sign")
library(devtools)
check("get_sign")
check("/home/rwd/tencentAI/R/emotion")
check("/home/rwd/tencentAI/R/emotion.R")
check("~/home/rwd/tencentAI/R/emotion.R")
load_all()
test()
document
document()
setwd("~/rwd/tencentAI")
library(devtools)
install_github('suntiansheng/tencentAI')
library(tencentAI)
?emotion
emotion('hello', app_id = app_id, app_key =  app_key)
chatting <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session' = 10000
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
devtools::load_all()
chatting('hello', app_key = app_key, app_id = app_id)
devtools::load_all()
chatting('hello', app_key = app_key, app_id = app_id)
devtools::load_all()
chatting('hello', app_key = app_key, app_id = app_id)
library(digest)
library(stringr)
library(jsonlite)
library(RCurl)
app_key <- 'OpsMj8HXPmbu9SMd'
app_id <- '1107152791'
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
#print(params_str)
str <- paste0(params_str, 'app_key=', app_key)
#print(str)
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
emotion <- function(text, app_key, app_id){
# 生成时间戳
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
# 生成随机字符串
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'text' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num()
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textpolar'
webpage <- postForm(url, .params = params)
result <- fromJSON(webpage)
return(result)
}
emotion('hello', app_key = app_key, app_id = app_id)
chatting <- function(text, app_key, app_id){
# 生成时间戳
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
# 生成随机字符串
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'question' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session' = '10000'
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- postForm(url, .params = params)
result <- fromJSON(webpage)
return(result)
}
chatting('hello', app_key = app_key, app_id = app_id)
chatting <- function(text, app_key, app_id){
# 生成时间戳
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
# 生成随机字符串
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'question' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session' = '10000'
)
print(params)
print(get_sign(params, app_key))
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- postForm(url, .params = params)
result <- fromJSON(webpage)
return(result)
}
chatting('hello', app_key = app_key, app_id = app_id)
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
print(params_str)
str <- paste0(params_str, 'app_key=', app_key)
print(str)
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
chatting('hello', app_key = app_key, app_id = app_id)
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
print(params_run)
print(params_run[order(names(params_run))])
params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
print(params_str)
str <- paste0(params_str, 'app_key=', app_key)
print(str)
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
chatting('hello', app_key = app_key, app_id = app_id)
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
print(params_run)
print(params_run[order(names(params_run))])
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
print(params_str)
str <- paste0(params_str, 'app_key=', app_key)
print(str)
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
chatting('hello', app_key = app_key, app_id = app_id)
library(devtools)
load_all()
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
load_all()
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
app_id = '1107152791'
app_key = 'OpsMj8HXPmbu9SMd'
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
chatting('hello', app_id = app_id, app_key = app_key)
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
emotion('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
library(RCurl)
?curlEscape
#' A API to tencent AI lab's chatting robort
#'
#' \code{chatting} returns the emotion analysis APP results
#' @param text The text is sent to API
#' @param app_key Your app key
#' @param app_id Your app ID
#' @return reply of chatting robort
#' @author person("Ao", "Sun", "ao_sun_xmu@163.com", role = "aut")
#' @export
chatting <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'question' = curlEscape(URLencode(enc2utf8(text))),
'time_stamp' = timestamp_num(),
'session' = '10000'
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
curlEscape(URLencode(enc2utf8('你好，很高兴和你聊天')))
library(digest)
library(stringr)
library(rjson)
library(RCurl)
#library(httr)
app_key <- 'OpsMj8HXPmbu9SMd'
# 生成时间戳
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
# 生成随机字符串
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
# 转换params, sign, 生成request_body
params_trans <- function(params, app_key) {
params_run <- params[nchar(params) > 0] # 空值不参与计算
params_run[order(names(params_run))] # 重新排序
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
str <- paste0(params_str, 'app_key=', app_key) # 拼接app key
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE)) # 生成sign值
params['sign'] <- sign_str # 重新赋值
params_str <- paste0(names(params), '=', params, '&') %>% paste0(collapse = '') # 重新拼接
params_str <- str_sub(params_str, 1, nchar(params_str) - 1)
return(params_str)
}
#chatting
chatting <- function(app_id = app_id, app_key = app_key, keywords = '今天的天气不错呀') {
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
request_body <- params_trans(params = params, app_key = app_key)
# print(request_body)
curl_opts <- list(
# httpheader = myheader,
postfields = request_body
)
webpage <- postForm(url, .opts = curl_opts)
result <- fromJSON(webpage)
return(result)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
# 转换params, sign, 生成request_body
params_trans <- function(params, app_key) {
params_run <- params[nchar(params) > 0] # 空值不参与计算
params_run <- params_run[order(names(params_run))] # 重新排序
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
str <- paste0(params_str, 'app_key=', app_key) # 拼接app key
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE)) # 生成sign值
params['sign'] <- sign_str # 重新赋值
params_str <- paste0(names(params), '=', params, '&') %>% paste0(collapse = '') # 重新拼接
params_str <- str_sub(params_str, 1, nchar(params_str) - 1)
return(params_str)
}
#chatting
chatting <- function(app_id = app_id, app_key = app_key, keywords = '今天的天气不错呀') {
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
request_body <- params_trans(params = params, app_key = app_key)
# print(request_body)
curl_opts <- list(
# httpheader = myheader,
postfields = request_body
)
webpage <- postForm(url, .opts = curl_opts)
result <- fromJSON(webpage)
return(result)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
c <- c('h' = "高兴就好")
c
c <- c('h' = "高兴就好", n = 1)
URLencode(enc2utf8(c))
URLencode(enc2utf8(1))
is.character(c)
is.character(c)c
c
URLencode(enc2utf8(c[1]))
URLencode(enc2utf8(c[2]))
#get API authentication
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
for(i in length(params_run)){
params_run[i] <- URLencode(enc2utf8(params_run[i]))
}
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
str <- paste0(params_str, 'app_key=', app_key)
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
#' A API to tencent AI lab's chatting robort
#'
#' \code{chatting} returns the emotion analysis APP results
#' @param text The text is sent to API
#' @param app_key Your app key
#' @param app_id Your app ID
#' @return reply of chatting robort
#' @author person("Ao", "Sun", "ao_sun_xmu@163.com", role = "aut")
#' @export
chatting <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'question' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session' = '10000'
)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
for(i in length(params_run)){
params_run[i] <- URLencode(enc2utf8(params_run[i]))
}
print(params_run)
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
str <- paste0(params_str, 'app_key=', app_key)
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
str <- paste0(params_str, 'app_key=', app_key)
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
return(sign_str)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
#' A API to tencent AI lab's chatting robort
#'
#' \code{chatting} returns the emotion analysis APP results
#' @param text The text is sent to API
#' @param app_key Your app key
#' @param app_id Your app ID
#' @return reply of chatting robort
#' @author person("Ao", "Sun", "ao_sun_xmu@163.com", role = "aut")
#' @export
chatting <- function(text, app_key, app_id){
timestamp_num <- function() {ceiling(as.numeric(as.POSIXct(Sys.time(), format="%Y-%m-%d %H:%M:%S")))}
nonce_run <- function() {paste0(sample(c(letters, ceiling(runif(10, 0, 9))), 10), collapse = '')}
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'question' = URLencode(enc2utf8(text)),
'time_stamp' = timestamp_num(),
'session' = '10000'
)
print(params)
params['sign'] = get_sign(params, app_key)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
webpage <- RCurl::postForm(url, .params = params)
result <- jsonlite::fromJSON(webpage)
return(result)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
#chatting
chatting_test <- function(app_id = app_id, app_key = app_key, keywords = '今天的天气不错呀') {
params <- c(
'app_id' = app_id,
'nonce_str' = nonce_run(),
'sign' = '',
'session' = '10000',
'question' = URLencode(enc2utf8(keywords)),
'time_stamp' = timestamp_num()
)
print(params)
url = 'https://api.ai.qq.com/fcgi-bin/nlp/nlp_textchat'
request_body <- params_trans(params = params, app_key = app_key)
# print(request_body)
curl_opts <- list(
# httpheader = myheader,
postfields = request_body
)
webpage <- postForm(url, .opts = curl_opts)
result <- fromJSON(webpage)
return(result)
}
chatting_test('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
# 转换params, sign, 生成request_body
params_trans <- function(params, app_key) {
params_run <- params[nchar(params) > 0] # 空值不参与计算
params_run <- params_run[order(names(params_run))] # 重新排序
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
str <- paste0(params_str, 'app_key=', app_key) # 拼接app key
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE)) # 生成sign值
print('sign')
print(sign_str)
params['sign'] <- sign_str # 重新赋值
params_str <- paste0(names(params), '=', params, '&') %>% paste0(collapse = '') # 重新拼接
params_str <- str_sub(params_str, 1, nchar(params_str) - 1)
return(params_str)
}
chatting_test('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
#get API authentication
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
str <- paste0(params_str, 'app_key=', app_key)
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
print(sign_str)
return(sign_str)
}
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
#get API authentication
get_sign <- function(params, app_key){
params_run <- params[nchar(params) > 0]
params_run <- params_run[order(names(params_run))]
params_str <- paste0(names(params_run), '=', params_run, '&', collapse = '')
str <- paste0(params_str, 'app_key=', app_key)
print(str)
sign_str <- toupper(digest::digest(str,algo="md5", serialize=FALSE))
print(sign_str)
return(sign_str)
}
# 转换params, sign, 生成request_body
params_trans <- function(params, app_key) {
params_run <- params[nchar(params) > 0] # 空值不参与计算
params_run <- params_run[order(names(params_run))] # 重新排序
params_str <- paste0(names(params_run), '=', params_run, '&') %>% paste0(collapse = '')
str <- paste0(params_str, 'app_key=', app_key) # 拼接app key
print(str)
sign_str <- toupper(digest(str,algo="md5", serialize=FALSE)) # 生成sign值
print('sign')
print(sign_str)
params['sign'] <- sign_str # 重新赋值
params_str <- paste0(names(params), '=', params, '&') %>% paste0(collapse = '') # 重新拼接
params_str <- str_sub(params_str, 1, nchar(params_str) - 1)
return(params_str)
}
chatting_test('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
chatting('你好，很高兴和你聊天', app_id = app_id, app_key = app_key)
library(devtools)
load_all()
load_all()
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
load_all()
chatting('你好',app_id = app_id,app_key = app_key)
document()
?chatting
document()
?emotion
setwd("~/rwd/tencentAI")
library(devtools)
install_github('suntiansheng/tencentAI')
library("tencentAI", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
chatting('你好', app_id = '1107152791', app_key = 'OpsMj8HXPmbu9SMd')
?emotion
chatting('hello', app_id = '1107152791', app_key = 'OpsMj8HXPmbu9SMd')
emotion('hello', app_id = '1107152791', app_key = 'OpsMj8HXPmbu9SMd')
